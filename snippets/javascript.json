{
  "use strict": {
    "prefix": "strict",
    "body": "'use strict'$0",
    "description": "Code snippet for 'use strict'"
  },
  "comment.big.block": {
    "prefix": "cmm",
    "body": [
      "/**",
      "|--------------------------------------------------",
      "| $0",
      "|--------------------------------------------------",
      "*/"
    ]
  },
  "immediately-invoked function expression ES5": {
    "prefix": "iife",
    "body": ["(function($1) {", "\t$0", "})($1)"],
    "description": "Code snippet for immediately-invoked function expression"
  },
  "this": {
    "prefix": "this",
    "body": ["this.$1 = $1"]
  },
  "function as a property of an object": {
    "prefix": "ofn",
    "body": ["${1:functionName}: function(${2:arguments}) {", "\t$0", "}"],
    "description": "Code snippet for function as a property of an object"
  },
  "require": {
    "prefix": "req",
    "body": "const ${1:package} = require('${1:package}')$0",
    "description": "Require a package"
  },
  "moduleExports": {
    "prefix": "mex",
    "body": "module.exports = {\n\t$0\n}\n",
    "description": "Module exports from Common JS"
  },
  // console
  "consoleClear": {
    "prefix": "cclear",
    "body": "console.clear()",
    "description": "Clears the console"
  },
  "consoleDir": {
    "prefix": "cdir",
    "body": "console.dir(${1:object})",
    "description": "Prints a JavaScript representation of the specified object"
  },
  "consoleError": {
    "prefix": "cerror",
    "body": "console.error(${1:object})",
    "description": "Displays a message in the console and also includes a stack trace from where the method was called"
  },
  "consoleLog": {
    "prefix": "clog",
    "body": "console.log($0)",
    "description": "Displays a message in the console"
  },
  "consoleInfo": {
    "prefix": "cinfo",
    "body": "console.info(${1:object})",
    "description": "Displays a message in the console but also displays a blue information icon along with the logged message"
  },
  // dom
  "getElementById": {
    "prefix": "gid",
    "body": "document.getElementById('${1:id}')$0",
    "description": "Code snippet for \"getElementById\""
  },
  "getElementsByClassName": {
    "prefix": "gcl",
    "body": "document.getElementsByClassName('${1:class}')$0",
    "description": "Code snippet for \"getElementsByClassName\""
  },
  "getElementsByTagName": {
    "prefix": "gtag",
    "body": "document.getElementsByTagName('${1:tag}')$0",
    "description": "Code snippet for \"getElementsByTagName\""
  },
  "addEventListener": {
    "prefix": ".al",
    "body": [".addEventListener('${1:load}', function () {\n\t${2://}\n})$0"],
    "description": "Code snippet for \"addEventListener\""
  },
  "querySelector": {
    "prefix": "qs",
    "body": "document.querySelector('${1}')$0",
    "description": "Code snippet for \"querySelector\""
  },
  "querySelectorAll": {
    "prefix": "qsa",
    "body": "document.querySelectorAll('$1')$0",
    "description": "Code snippet for \"querySelectorAll\""
  },
  "createElement": {
    "prefix": "ce",
    "body": "document.createElement('$1')$0",
    "description": "Code snippet for \"createElement\""
  },
  // es6
  "immediately-invoked function expression": {
    "prefix": "iifeES6",
    "body": ["(($1) => {", "\t$0", "})($1)"],
    "description": "Code snippet for immediately-invoked function expression"
  },
  "import": {
    "prefix": "imp",
    "body": "import ${1:moduleName} from '${2:module}'$0",
    "description": "Import a module using ES6 Modules"
  },
  "importNoModuleName": {
    "prefix": "imn",
    "body": "import '${1:module}'$0",
    "description": "Import an ES6 module with no name"
  },
  "importDestructing": {
    "prefix": "imd",
    "body": "import {$2 } from '${1:module}'$0",
    "description": "Imports only a portion of a module using ES6 modules"
  },
  "importEverything": {
    "prefix": "ime",
    "body": "import * as ${1:alias} from '${2:module}'$0",
    "description": "Import everything using its own alias using ES6 modules"
  },
  "importAs": {
    "prefix": "ima",
    "body": "import { ${1:originalName} as ${2:alias} } from '${3:module}'$0"
  },

  "exportDefault": {
    "prefix": "exd",
    "body": "export default $0"
  },
  "exportDestructing": {
    "prefix": "ex",
    "body": "export { $1 } from '${2:module}'$0"
  },
  "exportAs": {
    "prefix": "exa",
    "body": "export { ${1:originalName} as ${2:alias} } from '${3:module}'$0"
  },
  "const": {
    "prefix": "cst",
    "body": "const ${1} = ${1}"
  },
  "forOf": {
    "prefix": "fof",
    "body": "for (const ${1:item} of ${2:array/string}) {\n\t${3://}\n}$0",
    "description": "Iterating over property names of iterable objects"
  },
  "forIn": {
    "prefix": "fin",
    "body": "for (const ${1:item} in ${2:object}) {\n\t${3://}\n}$0",
    "description": "Iterating over property values of iterable objects"
  },
  "forEach": {
    "prefix": "feach",
    "body": "${1:array}.forEach(${2:item} => {\n\t${3://}\n})$0",
    "description": "Creates a forEach statement in ES6 syntax"
  },
  "anonymousFunction": {
    "prefix": "afn",
    "body": "(${1:params}) => {\n\t${2}\n}$0",
    "description": "Creates an anonymous function in ES6 syntax"
  },
  "namedFunction": {
    "prefix": "cfn",
    "body": "const ${1:name} = ${2:arg} => $0",
    "description": "Creates a named function in ES6 syntax"
  },
  "namedFunction2": {
    "prefix": "cfnn",
    "body": "const ${1:name} = (${2:params}) => {\n\t$0\n}",
    "description": "Creates a named function in ES6 syntax"
  },
  "setInterval": {
    "prefix": "sti",
    "body": "setInterval(() => {\n\t${2://}\n}, ${1:intervalInms})$0",
    "description": "Executes the given function at specified intervals in ES6 syntax"
  },
  "setTimeOut": {
    "prefix": "sto",
    "body": "setTimeout(() => {\n\t${2://}\n}, ${1:delayInms})$0",
    "description": "Executes the given function after the specified delay in ES6 syntax"
  },
  "JSON.parse": {
    "prefix": "jparse",
    "body": "JSON.parse(${1:obj})$0",
    "description": "Code snippet for 'JSON.parse'"
  },
  "JSON.stringify": {
    "prefix": "jstr",
    "body": "JSON.stringify(${1:obj})$0",
    "description": "Code snippet for 'JSON.stringify'"
  },
  // express
  "express": {
    "prefix": "express",
    "body": [
      "const express = require('express')",
      "const app = express()",
      "const port = process.env.PORT || ${1:5000}\n",
      "app.get('/', (req, res) => res.send('Hey there!'))\n",
      "app.listen(port, () => { console.log(`Server has started on port \\${port\\}!!!`) })"
    ],
    "description": "Express boiler plate"
  },
  // promise
  "promise": {
    "prefix": "prom",
    "body": "new Promise((resolve, reject) => {\n\t${1://}\n})$0",
    "description": "Creates and returns a new Promise in the standard ES6 syntax"
  },
  "return promise": {
    "prefix": "rprom",
    "body": "return new Promise((resolve, reject) => {\n\t${1://}\n})$0",
    "description": "Creates and returns a new Promise in the standard ES6 syntax"
  },
  "thenCatch": {
    "prefix": ".thenc",
    "body": ".then((${1:result}) => {\n\t${2://}\n}).catch((${3:err}) => {\n\t${4://}\n})",
    "description": "Add the .then and .catch methods to handle promises"
  },
  "promiseTC": {
    "prefix": "promtc",
    "body": "const promise = new Promise((resolve, reject) => {\n\t${1}\n}).then((${2:result}) => {\n\t${3://}\n}).catch((${4:err}) => {\n\t${5://}\n})$0",
    "description": "Creates and returns a new Promise in the standard ES6 syntax"
  }
}
